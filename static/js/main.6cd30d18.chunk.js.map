{"version":3,"sources":["algorithms/HeapSort.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSort.js","components/ButtonComponent.js","components/VisualizerComponent.js","App.js","reportWebVitals.js","index.js"],"names":["array_length","bubbleSort","inputArr","swapped","animation","len","length","i","tmp","push","heap_root","input","left","right","max","swap","index_A","index_B","temp","HeapSort","Math","floor","arr","index1","index2","InsertionSort","animations","beginningIndex","currentIndex","SelectionSort","smallestIndex","MergeSort","array","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","j","doMerge","ButtonComponent","props","state","name","function","onClick","className","this","React","Component","TILE_COLOR","animate","speed","a","console","log","$","css","status","Object","keys","indices","tiles","document","getElementsByClassName","Promise","resolve","reject","setTimeout","style","backgroundColor","err","height","VisualizerComponent","color","animationSpeed","handleChange","bind","resetArray","createRandomInt","setState","e","target","value","min","random","Number","isInteger","parseInt","alert","BubbleSort","then","r","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","newHeight","special","window","location","reload","id","disabled","onChange","mergeSort","heapSort","insertionSort","selectionSort","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6cd30d18.chunk.js","sourcesContent":["let array_length;\n\nfunction heap_root(input, i, animation) {\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n    let max = i;\n\n    if (left < array_length && input[left] > input[max]) {\n        max = left;\n    }\n\n    if (right < array_length && input[right] > input[max])     {\n        max = right;\n    }\n\n    if (max !== i) {\n        swap(input, i, max);\n        animation.push({\"swap\": [i, max]})\n        heap_root(input, max, animation);\n    }\n    else {\n        animation.push({\"noSwap\": [i, max]})\n    }\n}\n\nfunction swap(input, index_A, index_B) {\n    let temp = input[index_A];\n    input[index_A] = input[index_B];\n    input[index_B] = temp;\n}\n\nfunction HeapSort(input) {\n\n    let animation = []\n    array_length = input.length;\n\n    for (let i = Math.floor(array_length / 2); i >= 0; i -= 1)      {\n        heap_root(input, i, animation);\n    }\n\n    for (let i = input.length - 1; i > 0; i--) {\n        swap(input, 0, i);\n        animation.push({\"swap\": [0, i]})\n        array_length--;\n        heap_root(input, 0, animation);\n    }\n\n    return animation\n\n}\n\nexport default HeapSort\n","let bubbleSort = (inputArr) => {\n\n    let animation = []\n\n    let len = inputArr.length;\n    let swapped;\n    do {\n        swapped = false;\n        for (let i = 0; i < len; i++) {\n            if (inputArr[i] > inputArr[i + 1]) {\n                let tmp = inputArr[i];\n                inputArr[i] = inputArr[i + 1];\n                inputArr[i + 1] = tmp;\n                animation.push({\"swap\": [i, i+1, inputArr[i], inputArr[i + 1]]})\n                swapped = true;\n            }\n            else {\n                animation.push({\"noSwap\": [i, i+1, inputArr[i], inputArr[i + 1]]})\n            }\n        }\n    } while (swapped);\n\n    return animation;\n};\n\nexport default bubbleSort;\n","function swap (arr, index1, index2){\n    let temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n}\n\nfunction InsertionSort(arr){\n\n    let animations = []\n\n    let beginningIndex = 0;\n    let currentIndex = 1;\n    while(currentIndex < arr.length){\n        while(currentIndex > 0){\n            let currentVal = arr[currentIndex];\n            if(currentVal <= arr[currentIndex - 1]){\n                swap(arr, currentIndex, currentIndex - 1);\n                animations.push({\"swap\": [currentIndex - 1, currentIndex]})\n                currentIndex--;\n            } else{\n                animations.push({\"noSwap\": [currentIndex - 1, currentIndex]})\n                break;\n            }\n\n        }\n        beginningIndex++;\n        currentIndex = beginningIndex + 1;\n\n    }\n\n    return animations;\n}\n\nexport default InsertionSort\n","function swap (arr, index1, index2){\n    let temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n}\n\nfunction SelectionSort(arr){\n    let animations = []\n    let smallestIndex = 0;\n    let currentIndex = 1;\n    let beginningIndex = 0;\n    while(beginningIndex < arr.length){\n        while(currentIndex < arr.length){\n            if(arr[smallestIndex] > arr[currentIndex]){\n                smallestIndex = currentIndex;\n            }\n            currentIndex++;\n        }\n        if(smallestIndex !== beginningIndex){\n            swap(arr, smallestIndex, beginningIndex)\n            animations.push({\"swap\": [smallestIndex, beginningIndex]})\n        }\n        else {\n            animations.push({\"noSwap\": [smallestIndex, beginningIndex]})\n        }\n        beginningIndex++;\n        currentIndex = beginningIndex + 1;\n        smallestIndex = beginningIndex;\n    }\n    return animations;\n}\n\nexport default SelectionSort\n","export function MergeSort(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n","import React from 'react';\n\nclass ButtonComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: this.props.name,\n            function: this.props.function,\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick={() => this.state.function()}\n                        className={\"button\"}>\n                    {this.state.name}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default ButtonComponent\n","import React from 'react';\nimport $ from 'jquery';\n\nimport BubbleSort from \"../algorithms/BubbleSort\";\nimport HeapSort from \"../algorithms/HeapSort\";\nimport InsertionSort from \"../algorithms/InsertionSort\";\nimport SelectionSort from \"../algorithms/SelectionSort\";\nimport QuickSort from \"../algorithms/QuickSort\";\nimport {MergeSort} from \"../algorithms/MergeSort\";\nimport ButtonComponent from \"./ButtonComponent\"\n\nconst TILE_COLOR = \"#c0d7e2\"\n\nconst TILE_COLOR_2 = \"#34a3d9\"\n\nlet animate = async function(animations, speed) {\n\n    console.log(\"START\")\n    $('.nav').css('display', \"none\")\n    $('.navDisabled').css('display', \"flex\")\n\n    for (let i = 0; i < animations.length; i++) {\n\n        const status = Object.keys(animations[i])[0]\n        const indices = animations[i][status]\n        const tiles = document.getElementsByClassName('tile')\n\n        await new Promise((resolve, reject) =>\n            setTimeout(() => {\n                console.log(\"SHIFT\")\n                if (status === \"noSwap\") {\n                    try {\n                        tiles[indices[1]].style.backgroundColor = TILE_COLOR\n                        tiles[indices[0]].style.backgroundColor = TILE_COLOR\n                    }\n                    catch(err) {\n                        console.log(err)\n                    }\n                }\n                else {\n                    try {\n                        let temp;\n                        temp = tiles[indices[1]].style.height\n                        tiles[indices[1]].style.height = tiles[indices[0]].style.height\n                        tiles[indices[0]].style.height = temp\n\n                        tiles[indices[1]].style.backgroundColor = TILE_COLOR\n                        tiles[indices[0]].style.backgroundColor = TILE_COLOR\n                    }\n                    catch(err) {\n                        console.log(err)\n                    }\n                }\n                resolve()\n            }, 1 * speed)\n        )\n    }\n    $('.navDisabled').css('display', \"none\")\n    $('.nav').css('display', \"flex\")\n    console.log(\"END\")\n    return speed\n}\n\nclass VisualizerComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            color: \"\",\n            animationSpeed: 1\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.resetArray()\n    }\n\n    resetArray() {\n        let temp = []\n        for (let i = 0; i < 100; i++) {\n            temp.push(this.createRandomInt(1, 500))\n        }\n        this.setState({\n            array: temp,\n            color: TILE_COLOR,\n            animationSpeed: 1,\n        })\n    }\n\n    handleChange(e) {\n        this.setState({ animationSpeed: e.target.value });\n    }\n\n    createRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    bubbleSort() {\n        if (!Number.isInteger(parseInt(this.state.animationSpeed))) {\n            alert(\"Enter Integer!\")\n            return ''\n        }\n        else {\n            const animations = BubbleSort(this.state.array)\n            animate(animations, this.state.animationSpeed).then(r => console.log(r))\n        }\n    }\n\n    heapSort() {\n        if (!Number.isInteger(parseInt(this.state.animationSpeed))) {\n            alert(\"Enter Integer!\")\n            return ''\n        }\n        else {\n            const animations = HeapSort(this.state.array)\n            animate(animations, this.state.animationSpeed).then(r => console.log(r))\n        }\n    }\n\n    insertionSort() {\n        if (!Number.isInteger(parseInt(this.state.animationSpeed))) {\n            alert(\"Enter Integer!\")\n            return ''\n        }\n        else {\n            const animations = InsertionSort(this.state.array)\n            animate(animations, this.state.animationSpeed).then(r => console.log(r))\n        }\n    }\n\n    selectionSort() {\n        if (!Number.isInteger(parseInt(this.state.animationSpeed))) {\n            alert(\"Enter Integer!\")\n            return ''\n        }\n        else {\n            const animations = SelectionSort(this.state.array)\n            animate(animations, this.state.animationSpeed).then(r => console.log(r))\n        }\n    }\n\n    // quickSort() {\n    //     const array = QuickSort(this.state.array, 0, this.state.array.length - 1)\n    //     this.setState({\n    //         array: array\n    //     })\n    // }\n    //\n    async mergeSort() {\n        if (!Number.isInteger(parseInt(this.state.animationSpeed))) {\n            alert(\"Enter Integer!\")\n            return ''\n        }\n        else {\n            const animations = await MergeSort(this.state.array);\n            let special = async function(speed) {\n                $('.nav').css('display', \"none\")\n                $('.navDisabled').css('display', \"flex\")\n                for (let i = 0; i < animations.length; i++) {\n                    const arrayBars = document.getElementsByClassName('tile');\n                    const isColorChange = i % 3 !== 2;\n                    if (isColorChange) {\n                        const [barOneIdx, barTwoIdx] = animations[i];\n                        const barOneStyle = arrayBars[barOneIdx].style;\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\n                        const color = i % 3 === 0 ? TILE_COLOR : TILE_COLOR;\n                        await new Promise((resolve, reject) =>\n                        setTimeout(() => {\n                            barOneStyle.backgroundColor = color;\n                            barTwoStyle.backgroundColor = color;\n                            resolve()\n                        }, i * speed/1000000)\n                        );\n                    } else {\n                        await new Promise((resolve, reject) =>\n                        setTimeout(() => {\n                            const [barOneIdx, newHeight] = animations[i];\n                            const barOneStyle = arrayBars[barOneIdx].style;\n                            barOneStyle.height = `${newHeight}px`;\n                            resolve()\n                        }, i * speed/1000000));\n                    }\n                }\n                $('.navDisabled').css('display', \"none\")\n                $('.nav').css('display', \"flex\")\n            }\n\n            special(this.state.animationSpeed)\n\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <div className={\"navDisabled\"}>\n                    <ButtonComponent status={false} function={() => {window.location.reload(false)}} name=\"Reset\"/>\n                    <button className={\"button hidden\"}>Generate New Array</button>\n                    <button className={\"button hidden\"}>MergeSort</button>\n                    <button className={\"button hidden\"}>BubbleSort</button>\n                    <button className={\"button hidden\"}>HeapSort</button>\n                    <button className={\"button hidden\"}>InsertionSort</button>\n                    <button className={\"button hidden\"}>SelectionSort</button>\n                    <div className={\"SetSpeedComponent\"}>\n                        <p className={\"SetSpeedComponentHeader hidden\"}>Set Speed (ms): </p>\n                        <input id={\"idDisabled\"}\n                               disabled={true}\n                               value={this.state.animationSpeed}\n                               onChange={this.handleChange}\n                               name=\"animationSpeed\" />\n                    </div>\n                </div>\n                <div className={\"nav\"}>\n                    <ButtonComponent function={() => {window.location.reload(false)}} name=\"Reset\"/>\n                    <ButtonComponent function={() => this.resetArray()}\n                                     name=\"Generate New Array\"\n                                     />\n                    <ButtonComponent function={() => this.mergeSort()}\n                                     name=\"MergeSort\"\n                    />\n                    <ButtonComponent function={() => this.bubbleSort()}\n                                     name=\"BubbleSort\"\n                                    />\n                    <ButtonComponent function={() => this.heapSort()}\n                                     name=\"HeapSort\"\n                                    />\n                    <ButtonComponent function={() => this.insertionSort()}\n                                     name=\"InsertionSort\"/>\n                    <ButtonComponent function={() => this.selectionSort()}\n                                     name=\"SelectionSort\"/>\n                    <div className={\"SetSpeedComponent\"}>\n                        <p className={\"SetSpeedComponentHeader\"}>Set Speed (ms): </p>\n                        <input id={\"id\"}\n                               value={this.state.animationSpeed}\n                               onChange={this.handleChange}\n                               name=\"animationSpeed\" />\n                        {/*<p>{this.state.animationSpeed}</p>*/}\n                    </div>\n                </div>\n                <h1>Sorting Algorithm Visualizer</h1>\n                <div className={\"container\"} id={\"container\"}>\n                    {this.state.array.map(e=>{\n                        return <div className={\"tile\"} style={{height: e, backgroundColor: this.state.color}}>{}</div>\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default VisualizerComponent;\n","import './App.css';\n\n\nimport VisualizerComponent from \"./components/VisualizerComponent\";\nimport React from \"react\";\n\nclass App extends React.Component {\n  render() {\n    return(\n        <div className=\"App\">\n          <VisualizerComponent/>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}